-- Drop existing table if it exists
drop table if exists friend_relationships cascade;

-- Create the friend_relationships table with proper foreign keys
create table friend_relationships (
    id bigint generated by default as identity primary key,
    user_id uuid not null,
    friend_id uuid not null,
    status text check (status in ('pending', 'accepted')) not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    constraint unique_friendship unique(user_id, friend_id),
    constraint friend_relationships_user_id_fkey foreign key (user_id) references profiles(user_id),
    constraint friend_relationships_friend_id_fkey foreign key (friend_id) references profiles(user_id)
);

-- Enable Row Level Security
alter table friend_relationships enable row level security;

-- Create policies
create policy "Users can view their own relationships"
    on friend_relationships for select
    using (auth.uid() in (user_id, friend_id));

create policy "Users can insert their own requests"
    on friend_relationships for insert
    with check (auth.uid() = user_id);

create policy "Users can update their own relationships"
    on friend_relationships for update
    using (auth.uid() in (user_id, friend_id));

create policy "Users can delete their own relationships"
    on friend_relationships for delete
    using (auth.uid() in (user_id, friend_id));

-- Create indexes for better performance
create index friend_relationships_user_id_idx on friend_relationships(user_id);
create index friend_relationships_friend_id_idx on friend_relationships(friend_id);
create index friend_relationships_status_idx on friend_relationships(status);

-- Enable realtime
alter publication supabase_realtime add table friend_relationships; 